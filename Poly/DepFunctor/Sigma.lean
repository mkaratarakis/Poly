/-
Copyright (c) 2025 Wojciech Nawrocki. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Wojciech Nawrocki
-/

import Lean.Elab.Tactic.DiscrTreeKey
import Mathlib.CategoryTheory.Elements
import Mathlib.CategoryTheory.Functor.Currying
import Mathlib.CategoryTheory.Functor.Category

import SEq.Tactic.DepRewrite
import Poly.ForMathlib.CategoryTheory.Elements
import Poly.ForMathlib.CategoryTheory.NatIso
import Poly.ForMathlib.CategoryTheory.Types

open private mkKey from Lean.Elab.Tactic.DiscrTreeKey in
open Lean Meta Elab Tactic in
/-- Print the `DiscrTree` key of the current `conv` mode target. -/
macro "discr_tree_key" : conv =>
  `(conv| tactic => run_tac do
    let g ‚Üê Conv.getLhs
    logInfo <| ‚Üê DiscrTree.keysAsPattern <| ‚Üê mkKey g false)

open private mkKey from Lean.Elab.Tactic.DiscrTreeKey in
open Lean Meta Elab Tactic Conv in
/-- Attempt to match the current `conv` mode target
against the LHS of the specified theorem. -/
elab "discr_tree_match" n:ident : conv => do
  let c ‚Üê realizeGlobalConstNoOverloadWithInfo n
  let ci ‚Üê getConstInfo c
  let e ‚Üê Conv.getLhs
  let ciKey ‚Üê mkKey ci.type true
  let gKey ‚Üê mkKey e false
  logInfo m!"{ciKey.zip gKey |>.map fun (a, b) => m!"{a} := {b}"}"
  logInfo m!"{‚Üê DiscrTree.keysAsPattern ciKey} := {‚Üê DiscrTree.keysAsPattern gKey}"

namespace CategoryTheory.Functor

variable {ùíû ùíü : Type*} [Category ùíû] [Category ùíü]

/-- Given functors `F : ùíû ‚•§ Type v` and `G : ‚à´F ‚•§ ùíü ‚•§ Type v`,
produce the functor `(C, D) ‚Ü¶ (a : F(C)) √ó G((C, a))(D)`.

This is a dependent sum that varies naturally
in a parameter `C` of the first component,
and a parameter `D` of the second component.

We use this to package and compose natural equivalences
where one side (or both) is a dependent sum, e.g.
```
H(C) ‚ü∂ I(D)
=========================
(a : F(C)) √ó (G(C, a)(D))
```
is a natural isomorphism of bifunctors `ùíû·µí·µñ ‚•§ ùíü ‚•§ Type v`
given by `(C, D) ‚Ü¶ H(C) ‚ü∂ I(D)` and `G.Sigma`. -/
@[simps!]
/- Q: Is it necessary to special-case bifunctors?
(1) General case `G : F.Elements ‚•§ Type v` needs
a functor `F'` s.t. `F'.Elements ‚âÖ F.Elements √ó ùíü`; very awkward.
(2) General case `F : ùíû ‚•§ ùíü`, `G : ‚à´F ‚•§ ùíü`:
- what conditions are needed on `ùíü` for `‚à´F` to make sense?
- what about for `Œ£F. G : ùíû ‚•§ ùíü` to make sense?
- known concrete instances are `ùíü ‚àà {Type, Cat, Grpd}` -/
def Sigma.{v,u} {F : ùíû ‚•§ Type v} (G : F.Elements ‚•§ ùíü ‚•§ Type u) : ùíû ‚•§ ùíü ‚•§ Type (max v u) := by
  refine curry.obj {
    obj := fun (C, D) => (a : F.obj C) √ó (G.obj ‚ü®C, a‚ü©).obj D
    map := fun (f, g) ‚ü®a, b‚ü© =>
      ‚ü®F.map f a, (G.map ‚ü®f, rfl‚ü©).app _ ((G.obj ‚ü®_, a‚ü©).map g b)‚ü©
    map_id := ?_
    map_comp := ?_
  } <;> {
    intros
    ext ‚ü®a, b‚ü© : 1
    dsimp
    congr! 1 with h
    . simp
    . rw! [h]; simp [FunctorToTypes.naturality]
  }

def Sigma.isoCongrLeft.{v,u} {F‚ÇÅ F‚ÇÇ : ùíû ‚•§ Type v}
    /- Q: What kind of map `F‚ÇÇ.Elements ‚•§ F‚ÇÅ.Elements`
    could `NatTrans.mapElements i.hom` generalize to?
    We need to send `x ‚àà F‚ÇÇ(C)` to something in `F‚ÇÅ(C)`;
    so maybe the map has to at least be over `ùíû`. -/
    (G : F‚ÇÅ.Elements ‚•§ ùíü ‚•§ Type u) (i : F‚ÇÇ ‚âÖ F‚ÇÅ) :
    Sigma (NatTrans.mapElements i.hom ‚ãô G) ‚âÖ Sigma G := by
  refine NatIso.ofComponents‚ÇÇ
    (fun C D => Equiv.toIso {
      toFun := fun ‚ü®a, b‚ü© => ‚ü®i.hom.app C a, b‚ü©
      invFun := fun ‚ü®a, b‚ü© => ‚ü®i.inv.app C a, cast (by simp) b‚ü©
      left_inv := fun ‚ü®_, _‚ü© => by simp
      right_inv := fun ‚ü®_, _‚ü© => by simp
    }) ?_ ?_ <;> {
      intros
      ext : 1
      dsimp
      apply let h := ?_; Sigma.ext h ?_
      . simp [FunctorToTypes.naturality]
      . dsimp [Sigma] at h ‚ä¢
        rw! [‚Üê h]
        simp [NatTrans.mapElements]
    }

def Sigma.isoCongrRight.{v,u} {F : ùíû ‚•§ Type v} {G‚ÇÅ G‚ÇÇ : F.Elements ‚•§ ùíü ‚•§ Type u} (i : G‚ÇÅ ‚âÖ G‚ÇÇ) :
    Sigma G‚ÇÅ ‚âÖ Sigma G‚ÇÇ := by
  refine NatIso.ofComponents‚ÇÇ
    (fun C D => Equiv.toIso {
      toFun := fun ‚ü®a, b‚ü© => ‚ü®a, (i.hom.app ‚ü®C, a‚ü©).app D b‚ü©
      invFun := fun ‚ü®a, b‚ü© => ‚ü®a, (i.inv.app ‚ü®C, a‚ü©).app D b‚ü©
      left_inv := fun ‚ü®_, _‚ü© => by simp
      right_inv := fun ‚ü®_, _‚ü© => by simp
    }) ?_ ?_ <;> {
      intros
      ext : 1
      dsimp
      apply let h := ?_; Sigma.ext h ?_
      . simp
      . dsimp [Sigma] at h ‚ä¢
        simp [FunctorToTypes.binaturality_left, FunctorToTypes.binaturality_right]
    }
