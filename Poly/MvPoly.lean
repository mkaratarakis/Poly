/-
Copyright (c) 2024 Sina Hazratpour. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Sina Hazratpour
-/

import Poly.LCCC.BeckChevalley
import Poly.LCCC.Basic

/-!
# Polynomial Functor

-- TODO: there are various `sorry`-carrying proofs in below which require instances of
`CartesianExponentiable` for various constructions on morphisms. They need to be defined in
`Poly.Exponentiable`.
-/

noncomputable section

open CategoryTheory Category Limits Functor Adjunction Over

variable {C : Type*} [Category C] [HasPullbacks C] [  HasFiniteWidePullbacks C] [LCC C]

/-- `P : MvPoly I O` is a multivariable polynomial with input variables in `I`,
output variables in `O`, and with arities `E` dependent on `I`. -/
structure MvPoly (I O : C) where
  (E B : C)
  (i : E ‚ü∂ I)
  (p : E ‚ü∂ B)
  (exp : CartesianExponentiable p := by infer_instance)
  (o : B ‚ü∂ O)

namespace MvPoly

open CartesianExponentiable

variable {C : Type*} [Category C] [HasPullbacks C] [HasTerminal C] [HasFiniteWidePullbacks C]

attribute [instance] MvPoly.exp

/-- The identity polynomial in many variables. -/
@[simps!]
def id (I : C) : MvPoly I I := ‚ü®I, I, ùüô I, ùüô I, CartesianExponentiable.id, ùüô I‚ü©

instance (I : C) : CartesianExponentiable ((id I).p) := CartesianExponentiable.id



-- let's prove that the pullback along `initial.to` is isomorphic to the initial object
example [HasInitial C] {X Y : C} (f : Y ‚ü∂ X) :
    IsPullback (initial.to Y) (ùüô _) f (initial.to X) where
      w := by aesop
      isLimit' := by
        refine ‚ü®?_‚ü©
        sorry


/-- Given an object `X`, The unique map `initial.to X : ‚ä•_ C ‚ü∂ X ` is exponentiable. -/
instance [HasInitial C] (X : C) : CartesianExponentiable (initial.to X) where
  functor := {
    obj := sorry
    map := sorry
  }
  adj := sorry


/-- The constant polynomial in many variables: for this we need the initial object. -/
def const {I O : C} [HasInitial C] (A : C) [HasBinaryProduct O A] : MvPoly I O :=
  ‚ü®‚ä•_ C, prod O A, initial.to I , initial.to _, inferInstance, prod.fst‚ü©

/-- The monomial polynomial in many variables. -/
def monomial {I O E : C} (i : E ‚ü∂ I) (p : E ‚ü∂ O) [CartesianExponentiable p]: MvPoly I O :=
  ‚ü®E, O, i, p, inferInstance, ùüô O‚ü©

/-- The sum of two polynomials in many variables. -/
def sum {I O : C} [HasBinaryCoproducts C] (P Q : MvPoly I O) : MvPoly I O where
  E := P.E ‚®ø Q.E
  B := P.B ‚®ø Q.B
  i := coprod.desc P.i Q.i
  p := coprod.map P.p Q.p
  exp := {
    functor := sorry  -- prove that the sum of exponentiables is exponentiable.
    adj := sorry
  }
  o := coprod.desc P.o Q.o

/-- The product of two polynomials in many variables. -/
def prod {I O : C} [HasBinaryProducts C] (P Q : MvPoly I O) : MvPoly I O :=
  sorry

def functor {I O : C} (P : MvPoly I O) :
    Over I ‚•§ Over O :=
  (Œî_ P.i) ‚ãô (Œ†_ P.p) ‚ãô (Œ£_ P.o)

variable (I O : C) (P : MvPoly I O)

def apply {I O : C} (P : MvPoly I O) [CartesianExponentiable P.p] : Over I ‚Üí Over O := (P.functor).obj

/-TODO: write a coercion from `MvPoly` to a functor for evaluation of polynomials at a given
object.-/

def id_apply (q : X ‚ü∂ I) : (id I).apply (Over.mk q) ‚âÖ Over.mk q where
  hom := by
    simp [apply]
    simp [functor]
    exact {
      left := by
        dsimp
        sorry
      right := sorry
      w := sorry
    }
  inv := sorry
  hom_inv_id := sorry
  inv_hom_id := sorry

-- TODO: examples monomials, linear polynomials, 1/1-X, ...

-- TODO: The set of connected components of el(P) is in bijection with the set P(1) ‚âÖ A

section Composition

variable {I J K : C}

variable (P : MvPoly I J) (Q : MvPoly J K)

open CategoryTheory.Over

def pullback_counit :
  (Œî_ Q.p).obj ((Œ†_ Q.p).obj (.mk <| pullback.snd P.o Q.i)) ‚ü∂
    (.mk <| pullback.snd P.o Q.i) := adj.counit.app _

-- MK : Will golf all that later - keeping notation from the paper for now
abbrev t := P.o

abbrev u := Q.i

--Might not give the same pullback as Œî
def A' : C := pullback (t P) (u Q)

abbrev h : A' P Q ‚ü∂ P.B := by {apply pullback.fst}

abbrev k : A' P Q ‚ü∂ Q.E := by {apply pullback.snd}

def sq_I_comm : h P Q ‚â´ P.o = k P Q ‚â´ u Q := pullback.condition

abbrev f := P.p

def B' : C := pullback (f P) (h P Q)

abbrev m : B' P Q ‚ü∂ P.E := by {apply pullback.fst}

--check which pullbacks typeclass is the right one
--since Œî is not the same as pullback in general

/-- `w` is obtained by applying `Œ†_g` to `k`. -/
def w : Over Q.B := (Œ†_ Q.p).obj (Over.mk <| k P Q)

def g := Q.p

/-- D' is the pullback of M along g -/
def D' : C := ((Œî_ Q.g).obj (w P Q)).left

def Œµ' : (Œî_ Q.f).obj (P.w Q) ‚ü∂ (.mk <| k P Q) := adj.counit.app (.mk <| k P Q)

abbrev r : B' P Q ‚ü∂ A' P Q := by {apply pullback.snd}

def sq_III_comm : (m P Q) ‚â´ (f P) = (r P Q) ‚â´ (h P Q) := pullback.condition

def Œµ : D' P Q ‚ü∂ A' P Q  := (Œµ' P Q).left

def N : C := pullback (r P Q) (Œµ P Q)

--need to exploit how Œî f is defined
def q : D' P Q ‚ü∂ (w P Q).left := pullback.fst (P.w Q).hom Q.p

/-- This is `p` in the diagram. -/
abbrev p' : N P Q ‚ü∂ D' P Q := by {apply pullback.snd}

abbrev n : N P Q  ‚ü∂ B' P Q := by {apply pullback.fst}

def sq_IV_comm : (n P Q) ‚â´ (r P Q) = (p' P Q) ‚â´ (Œµ P Q) := pullback.condition

instance : CartesianExponentiable (P.q Q) := sorry

instance : CartesianExponentiable (P.p' Q) := sorry

/-- Functor composition for polynomial functors in the diagrammatic order. -/
def comp (P : MvPoly I J) (Q : MvPoly J K) : MvPoly I K where
  E := pullback (r P Q) (Œµ P Q)
  B := (P.w Q).left
  i := n P Q ‚â´ m P Q ‚â´ P.i
  p := p' P Q ‚â´ q P Q
  exp := CartesianExponentiable.comp (P.p' Q) (P.q Q)
  o := (w P Q).hom ‚â´ Q.o

def v := Q.o

def BCIso (hA' : IsPullback (P.k Q) (P.h Q) Q.u P.t) :
    IsIso (pullbackBeckChevalleyNatTrans (P.k Q) Q.u (P.h Q) P.t (pullback.condition).symm) :=
  pullbackBeckChevalleyNatTrans_of_IsPullback_is_iso (P.k Q) (Q.u) (P.h Q) (P.t) hA'

def first_BCh_iso (hA' : IsPullback (P.k Q) (P.h Q) Q.u P.t) :
    Œî_ P.h Q ‚ãô Œ£_ P.k Q ‚âÖ Œ£_ P.o ‚ãô Œî_ Q.i where
  hom := pullbackBeckChevalleyNatTrans (P.k Q) (Q.u) (P.h Q) (P.t) (pullback.condition).symm
  inv := Classical.choose ((BCIso P Q hA').out)
  hom_inv_id := (Classical.choose_spec (BCIso P Q hA').out).left
  inv_hom_id := (Classical.choose_spec (BCIso P Q hA').out).right

def s := P.i

def first_step_BCh_iso (hA' : IsPullback (P.k Q) (P.h Q) Q.u P.t) :
    Œî_ P.i ‚ãô Œ†_ P.p ‚ãô (Œ£_ P.o ‚ãô Œî_ Q.i) ‚ãô Œ†_ Q.p ‚ãô Œ£_ Q.o ‚âÖ
      Œî_ P.i ‚ãô Œ†_ P.p ‚ãô (Œî_ P.h Q ‚ãô Œ£_ P.k Q) ‚ãô Œ†_ Q.p ‚ãô Œ£_ Q.o  := by {
  apply isoWhiskerLeft _ <| isoWhiskerLeft _ <| isoWhiskerRight _ <| _
  exact (first_BCh_iso P Q hA').symm}

instance CEp' : CartesianExponentiable (p' P Q) := sorry

instance CEr : CartesianExponentiable (r P Q) := sorry

def bciii_Iso (hpb : IsPullback (P.m Q) (r P Q) (P.p) (P.h Q)) :
  IsIso (pushforwardBeckChevalleyNatTrans (P.m Q) (P.p) (r P Q) (P.h Q)
    pullback.condition P.exp (P.CEr Q)) := by {
  apply pushforwardBeckChevalleyNatTrans_of_IsPullback_is_iso
  exact hpb}

def BCiii (hpb : IsPullback (P.m Q) (r P Q) (P.p) (P.h Q)) :
    Œ†_ (P.p) ‚ãô Œî_ P.h Q ‚âÖ Œî_ P.m Q ‚ãô Œ†_ (r P Q) where
  hom := (pushforwardBeckChevalleyNatTrans (P.m Q) (P.p) (r P Q) (P.h Q)
    pullback.condition P.exp (P.CEr Q))
  inv := Classical.choose ((bciii_Iso P Q hpb).out)
  hom_inv_id := (Classical.choose_spec (bciii_Iso P Q hpb).out).left
  inv_hom_id := (Classical.choose_spec (bciii_Iso P Q hpb).out).right

instance : CartesianExponentiable (P.q Q) := sorry

def half_of_3rd_step_distrib_law (hpb : IsPullback (P.m Q) (P.r Q) P.p (P.h Q)) :
    Œî_ P.i ‚ãô (Œ†_ P.p ‚ãô Œî_ P.h Q) ‚ãô (Œî_ P.Œµ Q ‚ãô Œ†_ P.q Q ‚ãô Œ£_ (P.w Q).hom) ‚ãô Œ£_ Q.o ‚âÖ
    Œî_ P.i ‚ãô (Œî_ P.m Q ‚ãô Œ†_ (r P Q)) ‚ãô (Œî_ P.Œµ Q ‚ãô Œ†_ P.q Q ‚ãô Œ£_ (P.w Q).hom) ‚ãô Œ£_ Q.o := by {
  apply isoWhiskerLeft _ <| isoWhiskerRight _ <| _
  exact P.BCiii Q hpb}

def bciv_Iso (hpb : IsPullback (P.n Q) (p' P Q) (r P Q) (P.Œµ Q)) :
  IsIso (pushforwardBeckChevalleyNatTrans (P.n Q) (r P Q) (p' P Q)  (P.Œµ Q)
    pullback.condition (P.CEr Q) (P.CEp' Q)) := by {
  apply pushforwardBeckChevalleyNatTrans_of_IsPullback_is_iso
  exact hpb}

def BCiv (hpb : IsPullback (P.n Q) (p' P Q) (r P Q) (P.Œµ Q)) :
    Œ†_ (r P Q) ‚ãô Œî_ P.Œµ Q ‚âÖ Œî_ P.n Q ‚ãô Œ†_ (p' P Q) where
  hom := (pushforwardBeckChevalleyNatTrans (P.n Q) (r P Q) (p' P Q) (P.Œµ Q)
    pullback.condition (P.CEr Q) (P.CEp' Q))
  inv := Classical.choose (bciv_Iso P Q hpb).out
  hom_inv_id := (Classical.choose_spec (bciv_Iso P Q hpb).out).left
  inv_hom_id := (Classical.choose_spec (bciv_Iso P Q hpb).out).right

def second_half__distrib_law
    (hpb' : IsPullback (P.n Q) (P.p' Q) (P.r Q) (P.Œµ Q)) :
  Œî_ P.i ‚ãô Œî_ P.m Q ‚ãô (Œ†_ (r P Q) ‚ãô Œî_ P.Œµ Q) ‚ãô Œ†_ P.q Q ‚ãô Œ£_ (P.w Q).hom ‚ãô Œ£_ Q.o ‚âÖ
  Œî_ P.i ‚ãô Œî_ P.m Q ‚ãô (Œî_ P.n Q ‚ãô Œ†_ (p' P Q)) ‚ãô Œ†_ P.q Q ‚ãô Œ£_ (P.w Q).hom ‚ãô Œ£_ Q.o := by {
  apply isoWhiskerLeft _ <| isoWhiskerLeft _ <| isoWhiskerRight _ <| _
  exact BCiv P Q hpb'}

instance : CartesianExponentiable (P.h Q) := sorry

section distrib_diagram

variable {C' : Type*} [Category C'] [HasPullbacks C']
  (A B C : C') (u : C ‚ü∂ B) (f : B ‚ü∂ A) [CartesianExponentiable f]

def Mbar : Over A := (Œ†_ f).obj <| Over.mk u

def M : C' := (Mbar A B C u f).left

def v' : M A B C u f ‚ü∂ A := (Mbar A B C u f).hom

def N' : C' := ((Œî_ f).obj <| Over.mk (v' A B C u f)).left

def w' : N' A B C u f ‚ü∂  B := pullback.snd _ _

def g' : N' A B C u f ‚ü∂ M A B C u f := pullback.fst _ _

def H_pull_back_square : g' A B C u f ‚â´ v' A B C u f = w' A B C u f ‚â´ f := pullback.condition

def Œµ1 : ((Œî_ f).obj ((Œ†_ f).obj (Over.mk <| u))) ‚ü∂ (.mk <| u) := adj.counit.app (.mk <| u)

def e : N' A B C u f ‚ü∂ C := (Œµ1 A B C u f).left

instance : CartesianExponentiable (g' A B C u f) := sorry

def from_distrib_diagram_4_page_5_map :
  Œ£_ u ‚ãô Œ†_ f ‚ü∂ (Œî_ (e A B C u f) ‚ãô Œ†_ (g' A B C u f ) ‚ãô Œ£_ (v' A B C u f)) := sorry

def from_distrib_diagram_4_page_5_IsIso :
  IsIso (from_distrib_diagram_4_page_5_map A B C u f) := sorry

/-- We need to construct this iso (challenge) -/
def from_distrib_diagram_4_page_5_iso :
  Œ£_ u ‚ãô Œ†_ f ‚âÖ (Œî_ (e A B C u f) ‚ãô Œ†_ (g' A B C u f ) ‚ãô Œ£_ (v' A B C u f)) := sorry

end distrib_diagram

instance : CartesianExponentiable (P.k Q) := sorry

def second_step_distrib_law :
    Œî_ P.i ‚ãô Œ†_ P.p ‚ãô Œî_ P.h Q ‚ãô (Œ£_ P.k Q ‚ãô Œ†_ Q.p) ‚ãô Œ£_ Q.o ‚âÖ
    Œî_ P.i ‚ãô Œ†_ P.p ‚ãô Œî_ P.h Q ‚ãô (Œî_ P.Œµ Q ‚ãô Œ†_ (q P Q) ‚ãô Œ£_ (P.w Q).hom) ‚ãô Œ£_ Q.o := by {
  apply isoWhiskerLeft _ <| isoWhiskerLeft _ <| isoWhiskerLeft _ <| isoWhiskerRight _ <| _
  sorry
  --exact from_distrib_diagram_4_page_5_iso P Q
  }

def comp.functor : P.functor ‚ãô Q.functor ‚âÖ (P.comp Q).functor := by {
  unfold MvPoly.functor
  apply Iso.trans (first_step_BCh_iso P Q (IsPullback.flip (IsPullback.of_hasPullback P.o Q.i)))
  apply Iso.trans (second_step_distrib_law P Q)
  apply Iso.trans (half_of_3rd_step_distrib_law P Q
    (IsPullback.of_hasPullback P.f (pullback.fst P.t Q.u)))
  apply Iso.trans (second_half__distrib_law P Q (IsPullback.of_hasPullback _ _))
  --pseudo-functoriality
  have hdelta1 : Œî_ (P.m Q ‚â´ P.i) ‚âÖ Œî_ P.i ‚ãô Œî_ P.m Q := by {apply pullbackComp}
  have hdelta2 : Œî_ ((P.n Q ‚â´ P.m Q) ‚â´ P.i) ‚âÖ Œî_ P.i ‚ãô Œî_ P.m Q ‚ãô Œî_ P.n Q := by {
    simp only [assoc]
    sorry}
  unfold comp
  simp only [const_obj_obj]
  have iso1 : (Œî_ P.i ‚ãô Œî_ P.m Q ‚ãô Œî_ P.n Q)
   ‚ãô (Œ†_ P.p' Q ‚ãô Œ†_ P.q Q) ‚ãô Œ£_ (P.w Q).hom ‚ãô Œ£_ Q.o ‚âÖ
    (Œî_ P.i ‚ãô Œî_ P.m Q ‚ãô Œî_ P.n Q)
   ‚ãô Œ†_ (P.p' Q ‚â´ P.q Q) ‚ãô Œ£_ (P.w Q).hom ‚ãô Œ£_ Q.o := by
    apply isoWhiskerRight; exact Iso.refl _
  apply Iso.trans iso1
  have iso2 : (Œî_ P.i ‚ãô Œî_ P.m Q ‚ãô Œî_ P.n Q) ‚ãô Œ†_ (P.p' Q ‚â´ P.q Q) ‚ãô Œ£_ (P.w Q).hom ‚ãô Œ£_ Q.o ‚âÖ
      Œî_ ((P.n Q ‚â´ P.m Q) ‚â´ P.i) ‚ãô Œ†_ (P.p' Q ‚â´ P.q Q) ‚ãô Œ£_ (P.w Q).hom ‚ãô Œ£_ Q.o :=
    isoWhiskerRight hdelta2.symm _
  apply Iso.trans iso2
  simp only [assoc]
  apply isoWhiskerLeft
  sorry
  --apply isoWhiskerLeft
  --apply mapCompIso
  }

end Composition

end MvPoly

end
